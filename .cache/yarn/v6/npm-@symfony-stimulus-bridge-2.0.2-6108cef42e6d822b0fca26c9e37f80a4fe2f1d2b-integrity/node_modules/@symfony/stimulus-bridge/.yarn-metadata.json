{
  "manifest": {
    "name": "@symfony/stimulus-bridge",
    "description": "Stimulus integration bridge for Symfony projects",
    "version": "2.0.2",
    "main": "dist/index.js",
    "license": "MIT",
    "author": {
      "name": "Titouan Galopin",
      "email": "galopintitouan@gmail.com"
    },
    "engines": {
      "node": "^10.13.0 || >=12.0.0"
    },
    "scripts": {
      "build": "babel src -d dist",
      "test": "webpack --config test/webpack.config.js && jest"
    },
    "peerDependencies": {
      "stimulus": "^2.0"
    },
    "dependencies": {
      "acorn": "^8.0.5"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.1",
      "@babel/core": "^7.12.3",
      "@babel/preset-env": "^7.12.7",
      "@symfony/mock-module": "file:.cache/yarn/v6/npm-@symfony-stimulus-bridge-2.0.2-6108cef42e6d822b0fca26c9e37f80a4fe2f1d2b-integrity/node_modules/@symfony/stimulus-bridge/test/fixtures/module",
      "@symfony/stimulus-testing": "^1.0.0",
      "stimulus": "^2.0",
      "webpack": "^5.11.1",
      "webpack-cli": "^4.3.0"
    },
    "jest": {
      "testRegex": "test/.*\\.test.js",
      "setupFilesAfterEnv": [
        "./test/setup.js"
      ]
    },
    "files": [
      "src/",
      "dist/",
      "controllers.json",
      "lazy-controller-loader.js"
    ],
    "_registry": "npm",
    "_loc": "/var/www/.cache/yarn/v6/npm-@symfony-stimulus-bridge-2.0.2-6108cef42e6d822b0fca26c9e37f80a4fe2f1d2b-integrity/node_modules/@symfony/stimulus-bridge/package.json",
    "readmeFilename": "README.md",
    "readme": "# Symfony UX Stimulus bridge\n\nThe Stimulus bridge integrates [Stimulus](https://stimulus.hotwire.dev/)\ninto your Symfony app by automatically loading both third-party controllers\nand your own custom controllers. It works by reading a `controllers.json`\nfile that describes your third-party controllers. This file is updated\nautomatically when you install [Symfony UX Packages](https://github.com/symfony/ux).\n\nBefore you start, familiarize yourself with the basics of\n[Stimulus](https://stimulus.hotwire.dev/).\n\nSymfony UX Stimulus bridge is currently considered **experimental**.\n\n## Installation\n\nIf you don't already have Webpack Encore installed, install it with:\n\n```\ncomposer require encore\n```\n\nIf you didn't already have Webpack Encore installed, this should execute a\nSymfony Flex recipe that will set up everything for you. Finish by\nrunning Encore:\n\n```sh\nyarn encore watch\n```\n\nIf you already had Encore installed (and so the recipe did not run), you\ncan always install things manually.\n\n## Manual Installation\n\nThe Webpack Encore recipe usually handles setting up everything you need.\nBut you can also do it manually. First, install the bridge:\n\n```sh\nyarn add @symfony/stimulus-bridge stimulus --dev\n```\n\nNext, create an `assets/controllers.json` file: Flex will update\nthis whenever you install a UX package:\n\n```json\n{\n    \"controllers\": [],\n    \"entrypoints\": []\n}\n```\n\nNow, enable the Stimulus Bridge in Webpack Encore:\n\n```javascript\n// webpack.config.js\n\n// Provide the location of your controllers.json file\nEncore.enableStimulusBridge('./assets/controllers.json');\n```\n\nFinally, use the package in your JavaScript code. This will register\nany controllers defined in `controllers.json` (these are added\nautomatically when installing UX packages) and any controllers that\nyou add in `assets/controllers/`:\n\n```javascript\n// assets/app.js\n// (or assets/bootstrap.js - and then import it from app.js)\n\nimport { startStimulusApp } from '@symfony/stimulus-bridge';\n\nexport const app = startStimulusApp(require.context(\n    '@symfony/stimulus-bridge/lazy-controller-loader!./controllers',\n    true,\n    /\\.(j|t)sx?$/\n));\n```\n\nThat's it! Now run Encore:\n\n```sh\nyarn encore watch\n```\n\n## Usage: Installing UX Packages\n\nOnce the bridge is installed and enabled, you can use any of the\n[Symfony UX Packages](https://github.com/symfony/ux). After installing\neach one, Symfony Flex will update your `assets/controllers.json` file.\nThat will cause this bridge to automatically import and register that\ncontroller so that you can use it *immediately* without any configuration.\n\n## Usage: Creating Custom Controllers\n\nYou'll also want to create your own custom controllers. The bridge\nautomatically registers any controllers that live in the `assets/controllers/`.\n\nLet's see an example: create a new `assets/controllers/hello_controller.js`\nfile (you may already have this):\n\n```\nimport { Controller } from 'stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.textContent = 'Hello Stimulus! Edit me in assets/controllers/hello_controller.js';\n    }\n}\n```\n\nBecause this file is called `hello_controller.js`, it will register a controller\nnamed (`hello`). This follows the standard Stimulus naming conventions. Thanks\nto this, in any template, you can now add an element that uses this:\n\n```twig\n# templates/anything/any_template.html.twig\n\n<div data-controller=\"hello\"></div>\n```\n\nTry it! When you refresh the page, your controller will be executed and\nthe source will update to:\n\n```html\n<div data-controller=\"hello\">\n    Hello Stimulus! Edit me in assets/controllers/hello_controller.js    \n</div>\n```\n\nSee the [Stimulus Docs](https://stimulus.hotwire.dev/handbook/introduction)\nfor what else Stimulus can do!\n\n## Common Errors\n\nIf you get this error:\n\n> ./assets/bootstrap.js contains a reference to the file @symfony/autoimport.\n> This file can not be found.\n\nRemove the following line in the mentioned file: it's not needed anymore:\n\n```diff\n// assets/bootstrap.js\n\n// ...\n- import '@symfony/autoimport';\n```\n\nIf you get the error:\n\n> Cannot find module '@symfony/stimulus-bridge/webpack-helper'\n\nBe sure to upgrade to `@symfony/webpack-encore` version 1.0.0 or higher.\n\n## The controllers.json File\n\nThe bridge works by reading a `controllers.json` file that is automatically\nupdated by Symfony Flex whenever you download a UX-powered package. For\nexample, after running `composer require symfony/ux-dropzone`, it will\nlook like this:\n\n```json\n{\n    \"controllers\": {\n        \"@symfony/ux-dropzone\": {\n            \"dropzone\": {\n                \"enabled\": true,\n                \"fetch\": \"eager\",\n                \"autoimport\": {\n                    \"@symfony/ux-dropzone/src/style.css\": true\n                }\n            }\n        }\n    },\n    \"entrypoints\": []\n}\n```\n\nEach item under `controllers` will cause a Stimulus controller to be\nregistered with a specific name - in this case the controller would\nbe called `symfony--ux-dropzone--dropzone` (the `/` becomes `--`).\n\nBy default, the new controller will always be included in your\nJavaScript package. You can control that with the `fetch` option,\nordered from least to most lazy:\n\n* `fetch: 'eager'`: controller & dependencies are included in the JavaScript\n  that's downloaded when the page is loaded.\n* `fetch: 'lazy'`: controller & dependencies are isolated into a\n  separate file and only downloaded asynchronously if (and when) the `data-controller`\n  HTML appears on the page.\n\n## Lazy Controllers\n\nYou can also make your own controllers \"lazy\": giving them the same behavior\nas the `lazy-controller` explained above. In this case, your controller isn't\ndownloaded until an element for that controller first appears on the page.\n\nTo activate this, first make sure that you're using the special loader -\n`@symfony/stimulus-bridge/lazy-controller-loader` - when loading your controllers:\n\n```js\n// assets/bootstrap.js\n\nexport const app = startStimulusApp(require.context(\n    '@symfony/stimulus-bridge/lazy-controller-loader!./controllers',\n    true,\n    /\\.(j|t)sx?$/\n));\n```\n\nNext, you can make any controllers lazy by adding a `/* stimulusFetch: 'lazy' */`\ncomment above that controller:\n\n```js\nimport { Controller } from 'stimulus';\n\n/* stimulusFetch: 'lazy' */\nexport default class extends Controller {\n    // ...\n}\n```\n\n## Run tests\n\n```sh\nyarn test\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@symfony/stimulus-bridge/-/stimulus-bridge-2.0.2.tgz#6108cef42e6d822b0fca26c9e37f80a4fe2f1d2b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@symfony/stimulus-bridge/-/stimulus-bridge-2.0.2.tgz",
    "hash": "6108cef42e6d822b0fca26c9e37f80a4fe2f1d2b",
    "integrity": "sha512-n3Ku/mLv825v6+O38WO2U0wkuYL2BA1175cBLg+v8OjE51ujWmXTS9dOBpHjQyo6ETexGpArWH9KcVkkCkA7GA==",
    "registry": "npm",
    "packageName": "@symfony/stimulus-bridge",
    "cacheIntegrity": "sha512-n3Ku/mLv825v6+O38WO2U0wkuYL2BA1175cBLg+v8OjE51ujWmXTS9dOBpHjQyo6ETexGpArWH9KcVkkCkA7GA== sha1-YQjO9C5tgisPyibJ43+ApP4vHSs="
  },
  "registry": "npm",
  "hash": "6108cef42e6d822b0fca26c9e37f80a4fe2f1d2b"
}